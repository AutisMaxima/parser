#DONE
program ::= extern_lists decl_lists
| decl_lists

#DONE
extern_lists ::= extern extern_list

extern_list ::= extern extern_list
| epsilon

#DONE
extern ::= "extern" type_spec IDENT "(" params ")" ";"

#DONE
decl_lists ::= decl decl_list

decl_list ::= decl decl_list
| epsilon

#DONE
decl ::= "void" IDENT fun_decl
| var_type IDENT identified_decl

identified_decl ::= ";"
| fun_decl

#DONE 
type_spec ::= "void"
| var_type

#DONE
fun_decl ::= "(" params ")" block

#DONE
params ::= param_lists
| "void" 
| epsilon

#DONE
param_lists ::= param param_list

param_list ::= "," param param_list
| epsilon

#NA
param ::= var_type IDENT

#DONE
local_decls ::= local_decl
| more_local_decls

more_local_decls ::= local_decl more_local_decls
| epsilon

#NA
local_decl ::= var_type IDENT ";"

#DONE
var_type ::= "int" 
| "float" 
| "bool"

#DONE
stmt_list ::= stmt stmt_list
| epsilon

#DONE: Reprioritized stmts
stmt ::= block
| while_stmt
| if_stmt
| return_stmt
| expr_stmt

#DONE
while_stmt ::= "while" "(" expr ")" stmt

#DONE
if_stmt ::= "if" "(" expr ")" block else_stmt

#NA
else_stmt ::= 
"else" block
| epsilon

#DONE
return_stmt ::= "return" expr_stmt

#NA
block ::= "{" local_decls stmt_list "}"

#DONE
expr_stmt ::= ";"
| expr ";"

#return_stmt ::= "return" expr_stmt

#It is the same as expr_stmt
# returned ::= ";"
# | expr ";"


# operators in order of increasing precedence

#DONE
expr ::= IDENT expr_identified
| or_exprs

expr_identified ::= "=" expr 
| arg_block back_to_tree

back_to_tree ::= "||" or_exprs
| "&&" or_exprs
| "==" or_exprs
| "!=" or_exprs
| "<=" or_exprs
| "<" or_exprs
| ">=" or_exprs
| ">" or_exprs
| "+" or_exprs
| "-" or_exprs
| "*" or_exprs
| "/" or_exprs
| "%" or_exprs
| epsilon

#DONE
or_exprs ::= and_exprs or_expr

or_expr ::= "||" and_exprs or_expr
| epsilon

#DONE
and_exprs ::= equalities and_expr

and_expr ::= "&&" equalities and_expr
| epsilon

#DONE
equalities ::= comparisons equality

equality ::= "==" comparisons equality
| "!=" comparisons equality
| epsilon

#DONE
comparisons ::= arithmetics comparison

comparison ::= "<=" arithmetics comparison
| "<" arithmetics comparison
| ">=" arithmetics comparison
| ">" arithmetics comparison
| epsilon

#DONE
arithmetics ::= terms arithmetic

arithmetic ::= "+" terms arithmetic
| "-" terms arithmetic
| epsilon

#DONE
terms ::= unary term

term ::= "*" unary term
| "/" unary term
| "%" unary term
| epsilon

#DONE
unary ::= "-" bracketed_expr 
| "!" bracketed_expr
| bracketed_expr

#DONE
bracketed_expr ::= "(" expr ")"
| identifier

#DONE
identifier ::= IDENT arg_block
| literal 

arg_block ::= "(" args ")" 
| epsilon

#DONE
args ::= expr arg_list
| epsilon

arg_list ::= "," expr arg_list
| epsilon

#DONE
literal ::= INT_LIT 
| FLOAT_LIT 
| BOOL_LIT

